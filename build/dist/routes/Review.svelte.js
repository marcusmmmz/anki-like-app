/* src/routes/Review.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	component_subscribe,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_store_value,
	space,
	text
} from "../../_snowpack/pkg/svelte/internal.js";

import { boxes } from "../services/cards.js";

function create_else_block_1(ctx) {
	let h1;

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "No more cards to review";
		},
		m(target, anchor) {
			insert(target, h1, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(h1);
		}
	};
}

// (22:0) {#if !reviewing}
function create_if_block(ctx) {
	let p;
	let t0_value = /*currentCard*/ ctx[2].front + "";
	let t0;
	let t1;
	let t2;
	let div;
	let if_block0 = /*showBack*/ ctx[1] && create_if_block_2(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*showBack*/ ctx[1]) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx, -1);
	let if_block1 = current_block_type(ctx);

	return {
		c() {
			p = element("p");
			t0 = text(t0_value);
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			div = element("div");
			if_block1.c();
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			insert(target, t1, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t2, anchor);
			insert(target, div, anchor);
			if_block1.m(div, null);
		},
		p(ctx, dirty) {
			if (dirty & /*currentCard*/ 4 && t0_value !== (t0_value = /*currentCard*/ ctx[2].front + "")) set_data(t0, t0_value);

			if (/*showBack*/ ctx[1]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(t2.parentNode, t2);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div, null);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(p);
			if (detaching) detach(t1);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t2);
			if (detaching) detach(div);
			if_block1.d();
		}
	};
}

// (24:1) {#if showBack}
function create_if_block_2(ctx) {
	let p;
	let t_value = /*currentCard*/ ctx[2].back + "";
	let t;

	return {
		c() {
			p = element("p");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty & /*currentCard*/ 4 && t_value !== (t_value = /*currentCard*/ ctx[2].back + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (35:2) {:else}
function create_else_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "Show";
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*show*/ ctx[4]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (28:2) {#if showBack}
function create_if_block_1(ctx) {
	let button0;
	let t1;
	let button1;
	let mounted;
	let dispose;

	return {
		c() {
			button0 = element("button");
			button0.textContent = "Right";
			t1 = space();
			button1 = element("button");
			button1.textContent = "Wrong";
		},
		m(target, anchor) {
			insert(target, button0, anchor);
			insert(target, t1, anchor);
			insert(target, button1, anchor);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[7]),
					listen(button1, "click", /*click_handler_1*/ ctx[8])
				];

				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button0);
			if (detaching) detach(t1);
			if (detaching) detach(button1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (!/*reviewing*/ ctx[0]) return create_if_block;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

let boxIndex = 0;

function instance($$self, $$props, $$invalidate) {
	let currentBox;
	let currentCard;
	let $boxes;
	component_subscribe($$self, boxes, $$value => $$invalidate(6, $boxes = $$value));
	let { reviewing = false } = $$props;
	let showBack = false;

	function answer(right = true) {
		currentBox.shift();
		let boxToPut = right ? boxIndex + 1 : 0;
		set_store_value(boxes, $boxes[boxToPut] = [...$boxes[boxToPut], currentCard], $boxes);
		$$invalidate(1, showBack = false);
	}

	function show() {
		$$invalidate(1, showBack = true);
	}

	const click_handler = () => answer(true);
	const click_handler_1 = () => answer(false);

	$$self.$$set = $$props => {
		if ("reviewing" in $$props) $$invalidate(0, reviewing = $$props.reviewing);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$boxes*/ 64) {
			$: $$invalidate(5, currentBox = $boxes[boxIndex]);
		}

		if ($$self.$$.dirty & /*currentBox*/ 32) {
			$: $$invalidate(2, currentCard = currentBox[0]);
		}

		if ($$self.$$.dirty & /*currentBox*/ 32) {
			$: $$invalidate(0, reviewing = currentBox.length == 0);
		}
	};

	return [
		reviewing,
		showBack,
		currentCard,
		answer,
		show,
		currentBox,
		$boxes,
		click_handler,
		click_handler_1
	];
}

class Review extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { reviewing: 0 });
	}
}

export default Review;
import './App.svelte.css.proxy.js';
/* src/App.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import Review from "./routes/Review.svelte.js";
import AddCard from "./routes/AddCard.svelte.js";

function create_if_block(ctx) {
	let addcard;
	let t;
	let br;
	let current;
	addcard = new AddCard({});

	return {
		c() {
			create_component(addcard.$$.fragment);
			t = space();
			br = element("br");
		},
		m(target, anchor) {
			mount_component(addcard, target, anchor);
			insert(target, t, anchor);
			insert(target, br, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(addcard.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(addcard.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(addcard, detaching);
			if (detaching) detach(t);
			if (detaching) detach(br);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let review;
	let updating_reviewing;
	let t;
	let current;

	function review_reviewing_binding(value) {
		/*review_reviewing_binding*/ ctx[1].call(null, value);
	}

	let review_props = {};

	if (/*reviewing*/ ctx[0] !== void 0) {
		review_props.reviewing = /*reviewing*/ ctx[0];
	}

	review = new Review({ props: review_props });
	binding_callbacks.push(() => bind(review, "reviewing", review_reviewing_binding));
	let if_block = /*reviewing*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			create_component(review.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			attr(div, "class", "App svelte-v9lmn0");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(review, div, null);
			append(div, t);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const review_changes = {};

			if (!updating_reviewing && dirty & /*reviewing*/ 1) {
				updating_reviewing = true;
				review_changes.reviewing = /*reviewing*/ ctx[0];
				add_flush_callback(() => updating_reviewing = false);
			}

			review.$set(review_changes);

			if (/*reviewing*/ ctx[0]) {
				if (if_block) {
					if (dirty & /*reviewing*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(review.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(review.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(review);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let reviewing = false;

	function review_reviewing_binding(value) {
		reviewing = value;
		$$invalidate(0, reviewing);
	}

	return [reviewing, review_reviewing_binding];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;